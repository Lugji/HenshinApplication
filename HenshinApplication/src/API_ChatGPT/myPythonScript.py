from openai import OpenAI
import os

# Initialize OpenAI client
client = OpenAI(api_key="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")

# Define the model
model = "gpt-3.5-turbo"

messages = [{"role": "user", "content": "User: Objective: Conduct a conflict analysis among a set of Cypher queries based on specific operational interactions. Your task is to identify conflicts that occur when one query's operations interfere with another's, following the criteria outlined in the given pseudocode.\n\nConflict Criteria:\n- Conflicts arise if a DELETE clause in one query targets a node or edge that another query relies on in its MATCH clause.\n- Conflicts are identified if one query deletes the same node or edge specified in the DELETE clause of another query.\n- A conflict occurs if a CREATE clause in one query establishes an edge to a node that another query deletes.\n\nAnalysis Approach:\n1. Systematically compare each pair of Cypher queries to uncover conflicts based on the criteria above.\n2. For each query pair, examine if the DELETE actions in one query match elements referenced in the MATCH clauses of the other query.\n3. Check for conflicts where one query deletes the same elements targeted by the DELETE clauses of another query.\n4. Identify conflicts involving a CREATE action in one query that creates edges incident to nodes deleted by another query.\n\nExpected Outcome:\nYour analysis should result in a detailed report that articulates the conflicts between pairs of Cypher queries. Instead of a binary matrix, focus on describing:\n- The specific nature of each conflict detected, following the pseudocode logic.\n- Which queries are involved in each conflict scenario.\n- How one query's DELETE, CREATE, or MATCH clause operations directly conflict with another's.\n\nPlease ensure your explanations are clear and directly correspond to the conflict detection criteria provided. This approach aims to capture the essence of operational conflicts within the below given Cypher queries: \nCypher Query for rule createAccount:\nMATCH (bank1:Bank)-[a:CLIENTS]->(client1:Client), (bank1)-[b:MANAGERS]->(manager1:Manager)-[c:CLIENTS]->(client1)\nWHERE NOT (bank1)-[:ACCOUNTS]->(:Account{id: 'accountId'})\nCREATE (account1:Account), (bank1)-[d:ACCOUNTS]->(account1), (client1)-[e:ACCOUNTS]->(account1)\n\nCypher Query for rule deleteAccount:\nMATCH (bank1:Bank)-[a:MANAGERS]->(manager1:Manager)-[c:CLIENTS]->(client1:Client), (bank1)-[b:CLIENTS]->(client1), (bank1)-[d:ACCOUNTS]->(account1:Account)-[e:OWNER]->(client1)\nDELETE d, e, account1\n\nCypher Query for rule assignManagerToAClient:\nMATCH (bank1:Bank)-[a:CLIENTS]->(client1:Client), (bank1)-[b:MANAGERS]->(manager1:Manager)\nCREATE (manager1)-[c:CLIENTS]->(client1)\n\nCypher Query for rule moveAccountFromOneClientToAnother:\nMATCH (bank1:Bank)-[a:ACCOUNTS]->(account1:Account)-[d:OWNER]->(client1:Client), (bank1)-[b:CLIENTS]->(client2:Client), (bank1)-[c:CLIENTS]->(client1)\nDELETE d\nCREATE (account1)-[e:OWNER]->(client2)\n\nCypher Query for rule deleteManager:\nMATCH (bank1:Bank)-[a:MANAGERS]->(manager1:Manager)-[b:CLIENTS]->(client1:Client), (bank1)-[c:CLIENTS]->(client1)\nDELETE a, b, manager1\n\nCypher Query for rule createAClientWithAnAccAndManager:\nMATCH (bank1:Bank)-[a:MANAGERS]->(manager1:Manager)\nCREATE (client1:Client), (account1:Account), (bank1)-[b:CLIENTS]->(client1), (client1)-[c:ACCOUNTS]->(account1), (manager1)-[d:CLIENTS]->(client1), (bank1)-[e:ACCOUNTS]->(account1)\n\n"},
{"role": "assistant", "content": "ChatGPT: Conflict 1: Query \"deleteAccount\" conflicts with Query \"createAccount\":\n- Nature of Conflict: The DELETE clause in \"deleteAccount\" deletes the node (account1) and its relationships (d, e) that are created in the CREATE clause of \"createAccount\".\n- Involved Queries: deleteAccount and createAccount\n- Conflict Explanation: The deletion of the account node and its relationships in \"deleteAccount\" conflicts with the creation of the same account node in \"createAccount\".\n\nConflict 2: Query \"moveAccountFromOneClientToAnother\" conflicts with Query \"assignManagerToAClient\":\n- Nature of Conflict: The CREATE clause in \"assignManagerToAClient\" establishes a relationship between manager1 and client1, while \"moveAccountFromOneClientToAnother\" deletes the relationship between account1 and client1 and creates a new relationship with client2.\n- Involved Queries: moveAccountFromOneClientToAnother and assignManagerToAClient\n- Conflict Explanation: The actions of moving the account ownership to client2 in one query conflict with the assignment of manager1 to client1 in another query.\n\nConflict 3: Query \"deleteManager\" conflicts with Query \"createAClientWithAnAccAndManager\":\n- Nature of Conflict: The DELETE clause in \"deleteManager\" removes manager1 and its relationships with client1, while \"createAClientWithAnAccAndManager\" creates a relationship between manager1 and client1.\n- Involved Queries: deleteManager and createAClientWithAnAccAndManager\n- Conflict Explanation: Deleting manager1 and its connections in \"deleteManager\" conflicts with the creation of relationships involving manager1 in \"createAClientWithAnAccAndManager\"."},
{"role": "user", "content": "User: did you detected only three conflicts?"},
{"role": "assistant", "content": "ChatGPT: Based on the given set of Cypher queries, there were only three conflicts identified based on the conflict analysis criteria provided. If you would like a more thorough analysis or further details on the conflicts, please let me know, and I can provide additional information or insights."},
{"role": "user", "content": "User: try more, there aare more of them."},
{"role": "assistant", "content": "ChatGPT: Let's continue the conflict analysis as per your request:\n\nConflict 4: Query \"createAccount\" conflicts with Query \"deleteManager\":\n- Nature of Conflict: The CREATE clause in \"createAccount\" creates an account linked to a client1 and a manager1, while \"deleteManager\" deletes the relationships involving manager1 with client1, leading to a conflict.\n- Involved Queries: createAccount and deleteManager\n- Conflict Explanation: The creation of relationships with manager1 in \"createAccount\" conflicts with the deletion of manager1's relationships in \"deleteManager\".\n\nConflict 5: Query \"assignManagerToAClient\" conflicts with Query \"deleteAccount\":\n- Nature of Conflict: The CREATE clause in \"assignManagerToAClient\" establishes a relationship between manager1 and client1, while \"deleteAccount\" deletes the account1 node which is also associated with client1 and manager1.\n- Involved Queries: assignManagerToAClient and deleteAccount\n- Conflict Explanation: The creation of a relationship in one query conflicts with the deletion of an element shared in both queries, leading to inconsistency.\n\nConflict 6: Query \"moveAccountFromOneClientToAnother\" conflicts with Query \"createAClientWithAnAccAndManager\":\n- Nature of Conflict: \"moveAccountFromOneClientToAnother\" deletes the relationship between account1 and client1 and assigns a new relationship to client2, while \"createAClientWithAnAccAndManager\" also creates an account for client1, leading to an inconsistency.\n- Involved Queries: moveAccountFromOneClientToAnother and createAClientWithAnAccAndManager\n- Conflict Explanation: The actions of changing account ownership in one query conflict with creating a new account for client1 in another query.\n\nThese additional conflicts provide a more comprehensive understanding of how the Cypher queries interact and potentially interfere with each other."},
{"role": "user", "content": "User: tell me more abot the fifth conflict"},]

response = client.chat.completions.create(
  model=model,
  messages=messages,
)
response_text = response.choices[0].message.content
print(response_text)
response_text
